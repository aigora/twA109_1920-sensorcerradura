#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include<string.h>
#include <windows.h>


//Declaracion de Funciones
int **CargarP(char *filename,int *F,int *C);
void GuardarP(char *filename, int **M,int F,int C);
int **Reservar(int F, int C);
int comparador( int x, int y, int **M,int F, int C);
void Imprime(int **I,int F,int C);
int **Aleatorio (int F,int C);
void leer (int **I,int F,int C);
int **Cambiador (int **C,int n, int m,int ET,int SM);
char *Res(int C,int  F);


//Funcion Principal
int main(int argc, char *argv[]) {
//Declaracion de todas las variables
char filename[]="Partida.txt";
int Alto=0,Ancho=0,N;
int S=0,n=0;
int i,j,Estado,respuesta,respuesta1;
char rp;
int **Vieja,**Nueva;

printf("Cargar partida:1\nEmpezar partida:2\n");
scanf("%d",&respuesta1);
if(respuesta1==1){
Vieja=CargarP(filename,&Alto,&Ancho);
Nueva = Reservar(Alto,Ancho);
rp ='B';
}
else if(respuesta1==2){
rp ='A';}
do{
system("cls");
switch(rp){
case 'A':
   printf("Introduzca cuantas unidades Altura y Anchura desea para el perimetro del experimento \n");
   scanf("%d %d",&Alto,&Ancho);
   Nueva = Reservar(Alto,Ancho);
   printf("Introduzca el numero de iteraciones\n");
   scanf("%d",&N);
case 'C':
   printf("Â¿Quiere una Matriz aleatoria o propia?\n");
  do{
    printf("Aleatoria:1 Propia:2\n");
    scanf("%d",&respuesta);
    system("cls");
    if (respuesta==2){
     Vieja = Reservar(Alto,Ancho);
     printf("Introduzca la Matriz inicial 1=Encendido 0=Apagado\n");
     leer(Vieja,Alto,Ancho);
     system("cls");
     Imprime(Vieja,Alto,Ancho);}
    else if (respuesta == 1){
     Vieja = Aleatorio(Alto,Ancho);
     Imprime(Vieja,Alto,Ancho);
                             }
     }while (respuesta != 1 && respuesta != 2);
case 'B':
   if (rp=='B'){
    printf("Introduzca el numero de iteraciones\n");
    scanf("%d",&N);
    Imprime(Vieja,Alto,Ancho);}
    printf("PULSE ENTER PARA EMPEZAR\n");
    system("pause");
case 'D':
   fflush(stdin);
   while(n<N) {
 	Sleep(5);
     system("cls");
      for (i=0;i<Alto;i++){
       for(j=0;j<Ancho;j++){
          S = comparador(i,j,Vieja,Alto,Ancho);
          Estado = Vieja[i][j];
          //Cambio a la nueva Matriz
          Cambiador(Nueva,i,j,Estado,S);}
        }
     Imprime(Nueva,Alto,Ancho);
     Vieja = Nueva;
     n++;
               }
n=0;
printf("Autoguardando espere un momento\n");
Sleep(1000);
GuardarP(filename,Vieja,Alto,Ancho);
do{
     printf("MENU:\nCambiar todo->A \nCambiar numero de iteraciones->B \nCambiar Matriz->C \nRepetir->D \nSalir->F\n");
      scanf("%c",&rp);}while(rp!='A'&&rp!='B'&&rp!='C'&&rp!='D'&&rp!='F');}
   }while(rp!='F');
return 0;
}

// Funcion de comparacion de elementos de la Matriz
int comparador( int x, int y, int **M,int F, int C){
int i ,j,fila,colm, suma = 0 ;	
for (i= -1;i<2;i++){
   for(j= -1;j<2;j++){	
     fila= (x+i+F)%F;
     colm= (y+j+C)%C;
     suma = suma + M[fila][colm];
    }}
suma = suma - M[x][y];
return suma;
}


//Funcion para reservar memoria
int **Reservar(int F, int C){
int **Matriz,i;
Matriz = (int**)malloc(F*sizeof(int*));
   if (Matriz == NULL){printf("No se ha podido reservar espacio de meoria");
                      exit(1);
}
for(i=0;i<F;i++){
   Matriz[i] = (int*)malloc(C*sizeof(int));
   if (Matriz[i] == NULL){printf("No se ha podido reservar espacio de meoria");
                      exit(1);}
  }
return Matriz;
}


//Generador de Matriz aleatoria
int **Aleatorio (int F,int C){
int **A,i,j;
srand(time(NULL));
A =Reservar (F,C);
for (i=0;i<F;i++){
   for(j=0;j<C;j++){
     A[i][j]=0+rand()%(1-0+1);
  }}
 return A;
}

//Impresora de Matrices
void Imprime(int **I,int F,int C){
int i,j;
for (i=0;i<F;i++){
   for(j=0;j<C;j++){ 
     if(I[i][j]==1)
     printf("1 ");
     else{if(I[i][j]==0)
     printf("0 ");} 
    }
 printf("\n");}
 }
 
 //Funcion que cambia los valores de la matriz Nueva
int **Cambiador (int **C,int n, int m,int ET,int SM){
if( ET==0&&SM==3){
    C[n][m]=1;}
else{if(ET==1&&(SM<2||SM>3))
      C[n][m]=0;
       else C[n][m]= ET;}
return C;}
 
 
//lector de Matrices
void leer(int **I,int F,int C){
int i,j;
for (i=0;i<F;i++){
       for(j=0;j<C;j++){
       	scanf("%d",&I[i][j]);}}}
//Funcion para guardar partida


void GuardarP(char *filename, int **M,int F, int C){
FILE *f;
int i,j;
char *temp;
temp=Res(C,F);
f = fopen(filename,"wt");
if (f==NULL){
 printf("no se ha podido crear el fichero");}
else{
for (i=0;i<F;i++){
  for (j=0;j<C;j++){
      if(M[i][j]==1){    
        *(temp+(i*C+j))='1';}
      else if(M[i][j]==0){
         *(temp+(i*C+j))='0';}}
                  }
for (i=0;i<F;i++){                        
       for (j=0;j<C;j++)                           
         fprintf (f,"%c",*(temp+(i*C+j)));   
       fprintf (f,"\n");}                             
fclose(f);}
}

//Funcion para cargar la partida me falla esta parte
int **CargarP(char *filename,int *F,int *C){
  FILE *f;
  int contadorC=0,contadorF=0;
  int i,j;
  char aux,compara;
  int **M;
    f = fopen(filename,"r");
    rewind(f);
    while(aux!='\n'){
     fscanf(f,"%c",&aux);
     if(aux=='0'||aux=='1')
     contadorC++;
                }
    rewind(f);
    while(aux!=EOF){
      aux = fgetc(f);
      if(aux=='\n')
      contadorF++;
                }
    rewind(f);
   *C=contadorC;
   *F=contadorF;
    M = Reservar(*F,*C);
   for(i=0;i<*F;i++){
     for(j=0;j<*C;j++){
       fscanf(f,"%c",&compara);
       if(compara=='1')
       M[i][j]=1;
       else if(compara=='0')
       M[i][j]=0;
                  }}
rewind(f);
fclose(f);
printf("%d %d \n",*F,*C);
Imprime(M,*F,*C);
system("pause");
return M;
}

//Funcion para la memoria de Matrices char
char *Res(int C,int F){
char *V;
V = (char *) malloc (sizeof(char)*F*C);
 if (V == NULL)                                      
     printf ("Memoria insuficiente\n");
else
return V;
}
